pwd 
ls
cd 指定目錄
git init
git status
touch xxx.file
ls
git add xxx.file
git commit -m "comments..."
git log
可再繼續修改
git status
修改完後,一樣重複做...
git status
git add xxx.file
git commit -m "comment..."
git log

=======================================================================================
查看config 設定
git config --global --list
修改user.name 
git config --global user.name pb
修改user.email
git config --global user.email angela9211@hotmail.com.tw
清空指令
clear

========================================================================================
git 紀錄最新commit版本hash id
cat .git/refs/heads/master
========================================================================================
可將不commit 的檔案加到 .gitignore 裡面
========================================================================================
若repositories是在本機建立的,首次需push至GitHub,步驟:
git remote add <name> <url>
git push --set-upstream GitNotes master
這樣才能push上去 , 否則會失敗 
========================================================================================
從GitHub將資料pull 下來
git pull
========================================================================================
刪除檔案
git rm 'xxx.file'
========================================================================================
檔案更名
git mv oldfile.txt newfile.txt
========================================================================================
顯示工作目錄的索引狀態
git status -s
========================================================================================
重置目前的工作狀態
git reset --hard
========================================================================================
還原其中喔個被改壞的檔案
git checkout master xxx.file

========================================================================================
運算特定檔案的hash值
git hash-object xxx.file
查詢blob 物件
git log
查詢tree 物件
git cat-file -p master
查詢tree物件中所有的blob與tree物件
git cat-file -p <tree hash id>

========================================================================================
僅將「更新」或「刪除」的檔案變更寫入到索引檔中
git add -u 
刪除 - 將工作目錄下的檔案並更新索引檔
git rm filename
刪除 - 刪除索引檔中該檔案, 但布刪除工作索引中的檔案
git rm --cached a.txt
更名 - 同時更新索引與變更工作目錄下的實體檔案
git mv oldname newname
提交 - 把「索引檔」與「目前最新版」比對差異 , 新增一個commit物件
git commit
列出「索引檔」中所有檔案
git ls-files
========================================================================================
了解分支與合併的概念
- 從遠端(clone)複製一份到本地端建立版本庫就是分支的開始 , 
  而從本地端 push 上遠端 就是合併
- 分支合併: 遠端到地端--> pull , 地端到遠端--> push , 本地到本地-->merge 
========================================================================================
查看分支
git branch
建立分支
git branch newbranch
建立分支並切換到該分之
git checkout -b [Newbranch]
切換分支
git checkout [BranchName]
刪除分支(必須切換到其他分支才能刪除)
git branch -d branchName
========================================================================================
四種比對版本與檔案的差異:
1.比對「工作目錄」與「索引」之間的差異
	git diff 
2. 比對「工作目錄」與「指定commit物件裡的tree物件」
	git diff commit_id
	常用 git diff HEAD 比對「工作目錄」與「當前分支的最新版本」
3. 比對「當前索引狀態」與「指定commit物件裡的tree物件」
	git diff --cached commit_id
	常用 git diff --cached HEAD 比對「當前索引狀態」與「當前分支的最新版」
4. 比對兩個commit_id 版本之間的差異
	git diff <commit_old_id> <commit_new_id>
	常用 git diff HEAD^ HEAD 比對 「最新版的前一版」與「最新版」的差異

**** 保哥小結 : git diff 指令的差異:
git diff                 => 工作目錄 vs 索引
git diff HEAD            => 工作目錄 vs HEAD
git diff --cached HEAD   => 索引     vs HEAD
git diff --cached        => 索引     vs HEAD
git diff HEAD^ HEAD	 => HEAD^   vs HEAD


========================================================================================
查詢commit物件 or tree物件的內容
git cat-file -p commit_id <tree_id>
查詢簡易的 git log (兩種方式)
git log --pretty=oneline
git log --pretty=onelinie --abbrev-commit

========================================================================================
「參照名稱」的實體結構
每一分支就是一個commit id , 儲存在 .git/refs/heads/ , 會指向並儲存最新commit id 及變更的內容
git branch
git log --pretty=oneline
type .git/refs/heads/branchName
git cat-file -p <commit_id>
查看最新版變更內容
git show <commit_id>

========================================================================================
自訂參照名稱
git update-ref InitialCommit 物件id
查看該版本的狀態
git cat-file -p object_id
git cat-file -p InitialCommit
建立比較正式的參照名稱
git update-ref refs/InitialCommit
查詢所有參照名稱
git show-ref
一般參照: 就是物件的參照
符號參照: 就是一般參照的參照
git symbolic-ref refs/[符號參照名稱] refs/heads/[一般參照名稱]

========================================================================================
相對名稱: 找到特定commit物件(參考名稱)後,用相對位置來找其他的commit物件
參考名稱:S
^ : 第幾代
~ : 第幾層


========================================================================================
暫存工作目錄與索引的變更狀態
git stash (也可以寫成git stash save) 會將所有已列入追蹤(tracked)的檔案建立暫存版
git stash -u (也可以寫成git stash save -u) 會包括所有已追蹤或未追蹤的檔案,全部都建立成暫存檔
git stash list 列出所有暫存檔
git stash pop (也可以指定暫存檔版本,加上 "stash@{id}") 取回暫存檔, 重新合併回來, 並自動將stash 分支刪除
git stash apply (也可以指定暫存檔版本,加上 "stash@{id}")  取回暫存檔, 重新合併回來, 不會自動將stash 分支刪除
git stash drop "stash@{id}" 刪除特定版本暫存檔
git stash clear 刪除所有暫存檔

========================================================================================
列出 Git for Windows 所有選項
git config --list
設定系統層級選項<--system>: 務必使用系統管理員身分執行
git config --list --system
git config --system core.autocrlf <true/false> 
設定使用者層級選項<--global>:沒有權限上的問題
git config --list --global
設定儲存區層級<--local>
git config --list --local
取得定選項值
git config <user.name>
git config <user.email>
設定特定選項值
git config <user.name> XXXX
git config <user.email> xxxx@mail.com
刪除特定選項值
git config --unset --system <xxxxxx>
git config --unset --global <xxxxxx>
git config --unset --local <xxxxxx>
Commit 時套用訊息範本
git config --local commit.template "C:\git_example.txt"

========================================================================================
標籤(tag)分為兩種: 輕量標籤、標示標籤
列出、建立、刪除輕量標籤
git tag
git tag [tagname]
git tag [tagname] -d
查看特定輕量標籤內容
git cat-file -p [tagname]
標示標籤物件類型為 tag ; 輕量標籤則為 commit


========================================================================================
版本日誌 git reflog 追蹤並還原變更紀錄
復原紀錄: git reset "HEAD@{1}" --hard

只要透過指令修改了任何參照(ref)的內容,或是變更任何分支的HEAD參照內容,就會建立歷史紀錄
-->> commit、checkout、pull、push、merge、reset、clone、branch、rebase、stash
每一個分支、每一個暫存版本(stash),都會有自己的reflog歷史紀錄,這些資料也全部都會儲存在.git/logs/refs

只顯示特定分支的reflog紀錄
git reflog <分支名稱>
顯示每一 reflog 版本中完整的commit內容
git log -g
刪除特定的幾個版本的歷史紀錄
git reflog delete HEAD@{版號}
設定歷史紀錄的過期時間
git config --local gc.master.reflogExpire "14 days"
git config --local gc.master.reflogExpireUnreachable "14 days"

git config --local gc.newbranch.reflogExpire "never"
git config --local gc.newbranch.reflogExpireUnreachable "never"

清除歷史紀錄
git reflog expire --expire=now --all
git gc

========================================================================================




========================================================================================

========================================================================================

========================================================================================

========================================================================================

========================================================================================

========================================================================================

========================================================================================

========================================================================================


========================================================================================